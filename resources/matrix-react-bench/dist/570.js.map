{"version":3,"file":"570.js","mappings":"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","sources":["webpack://matrix-shell-bench/./node_modules/matrix-react-sdk/src/async-components/views/dialogs/eventindex/ManageEventIndexDialog.tsx"],"sourcesContent":["/*\nCopyright 2020-2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport { _t } from '../../../../languageHandler';\nimport SdkConfig from '../../../../SdkConfig';\nimport SettingsStore from \"../../../../settings/SettingsStore\";\n\nimport Modal from '../../../../Modal';\nimport { formatBytes, formatCountLong } from \"../../../../utils/FormattingUtils\";\nimport EventIndexPeg from \"../../../../indexing/EventIndexPeg\";\nimport { SettingLevel } from \"../../../../settings/SettingLevel\";\nimport Field from '../../../../components/views/elements/Field';\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\nimport { IDialogProps } from \"../../../../components/views/dialogs/IDialogProps\";\n\ninterface IProps extends IDialogProps {}\n\ninterface IState {\n    eventIndexSize: number;\n    eventCount: number;\n    crawlingRoomsCount: number;\n    roomCount: number;\n    currentRoom: string;\n    crawlerSleepTime: number;\n}\n\n/*\n * Allows the user to introspect the event index state and disable it.\n */\nexport default class ManageEventIndexDialog extends React.Component<IProps, IState> {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            eventIndexSize: 0,\n            eventCount: 0,\n            crawlingRoomsCount: 0,\n            roomCount: 0,\n            currentRoom: null,\n            crawlerSleepTime:\n                SettingsStore.getValueAt(SettingLevel.DEVICE, 'crawlerSleepTime'),\n        };\n    }\n\n    updateCurrentRoom = async (room) => {\n        const eventIndex = EventIndexPeg.get();\n        let stats;\n\n        try {\n            stats = await eventIndex.getStats();\n        } catch {\n            // This call may fail if sporadically, not a huge issue as we will\n            // try later again and probably succeed.\n            return;\n        }\n\n        let currentRoom = null;\n\n        if (room) currentRoom = room.name;\n        const roomStats = eventIndex.crawlingRooms();\n        const crawlingRoomsCount = roomStats.crawlingRooms.size;\n        const roomCount = roomStats.totalRooms.size;\n\n        this.setState({\n            eventIndexSize: stats.size,\n            eventCount: stats.eventCount,\n            crawlingRoomsCount: crawlingRoomsCount,\n            roomCount: roomCount,\n            currentRoom: currentRoom,\n        });\n    };\n\n    componentWillUnmount(): void {\n        const eventIndex = EventIndexPeg.get();\n\n        if (eventIndex !== null) {\n            eventIndex.removeListener(\"changedCheckpoint\", this.updateCurrentRoom);\n        }\n    }\n\n    async componentDidMount(): Promise<void> {\n        let eventIndexSize = 0;\n        let crawlingRoomsCount = 0;\n        let roomCount = 0;\n        let eventCount = 0;\n        let currentRoom = null;\n\n        const eventIndex = EventIndexPeg.get();\n\n        if (eventIndex !== null) {\n            eventIndex.on(\"changedCheckpoint\", this.updateCurrentRoom);\n\n            try {\n                const stats = await eventIndex.getStats();\n                eventIndexSize = stats.size;\n                eventCount = stats.eventCount;\n            } catch {\n                // This call may fail if sporadically, not a huge issue as we\n                // will try later again in the updateCurrentRoom call and\n                // probably succeed.\n            }\n\n            const roomStats = eventIndex.crawlingRooms();\n            crawlingRoomsCount = roomStats.crawlingRooms.size;\n            roomCount = roomStats.totalRooms.size;\n\n            const room = eventIndex.currentRoom();\n            if (room) currentRoom = room.name;\n        }\n\n        this.setState({\n            eventIndexSize,\n            eventCount,\n            crawlingRoomsCount,\n            roomCount,\n            currentRoom,\n        });\n    }\n\n    private onDisable = async () => {\n        const DisableEventIndexDialog = (await import(\"./DisableEventIndexDialog\")).default;\n        Modal.createTrackedDialog(\"Disable message search\", \"Disable message search\",\n            DisableEventIndexDialog,\n            null, null, /* priority = */ false, /* static = */ true,\n        );\n    };\n\n    private onCrawlerSleepTimeChange = (e) => {\n        this.setState({ crawlerSleepTime: e.target.value });\n        SettingsStore.setValue(\"crawlerSleepTime\", null, SettingLevel.DEVICE, e.target.value);\n    };\n\n    render() {\n        const brand = SdkConfig.get().brand;\n\n        let crawlerState;\n        if (this.state.currentRoom === null) {\n            crawlerState = _t(\"Not currently indexing messages for any room.\");\n        } else {\n            crawlerState = (\n                _t(\"Currently indexing: %(currentRoom)s\", { currentRoom: this.state.currentRoom })\n            );\n        }\n\n        const doneRooms = Math.max(0, (this.state.roomCount - this.state.crawlingRoomsCount));\n\n        const eventIndexingSettings = (\n            <div>\n                { _t(\n                    \"%(brand)s is securely caching encrypted messages locally for them \" +\n                    \"to appear in search results:\",\n                    { brand },\n                ) }\n                <div className='mx_SettingsTab_subsectionText'>\n                    { crawlerState }<br />\n                    { _t(\"Space used:\") } { formatBytes(this.state.eventIndexSize, 0) }<br />\n                    { _t(\"Indexed messages:\") } { formatCountLong(this.state.eventCount) }<br />\n                    { _t(\"Indexed rooms:\") } { _t(\"%(doneRooms)s out of %(totalRooms)s\", {\n                        doneRooms: formatCountLong(doneRooms),\n                        totalRooms: formatCountLong(this.state.roomCount),\n                    }) } <br />\n                    <Field\n                        label={_t('Message downloading sleep time(ms)')}\n                        type='number'\n                        value={this.state.crawlerSleepTime.toString()}\n                        onChange={this.onCrawlerSleepTimeChange} />\n                </div>\n            </div>\n        );\n\n        return (\n            <BaseDialog className='mx_ManageEventIndexDialog'\n                onFinished={this.props.onFinished}\n                title={_t(\"Message search\")}\n            >\n                { eventIndexingSettings }\n                <DialogButtons\n                    primaryButton={_t(\"Done\")}\n                    onPrimaryButtonClick={this.props.onFinished}\n                    primaryButtonClass=\"primary\"\n                    cancelButton={_t(\"Disable\")}\n                    onCancel={this.onDisable}\n                    cancelButtonClass=\"danger\"\n                />\n            </BaseDialog>\n        );\n    }\n}\n"],"names":["ManageEventIndexDialog","React","constructor","props","super","_defineProperty","async","eventIndex","EventIndexPeg","get","stats","getStats","currentRoom","room","name","roomStats","crawlingRooms","crawlingRoomsCount","size","roomCount","totalRooms","this","setState","eventIndexSize","eventCount","DisableEventIndexDialog","default","Modal","createTrackedDialog","e","crawlerSleepTime","target","value","SettingsStore","setValue","SettingLevel","DEVICE","state","getValueAt","componentWillUnmount","removeListener","updateCurrentRoom","componentDidMount","on","render","brand","SdkConfig","crawlerState","_t","doneRooms","Math","max","eventIndexingSettings","className","formatBytes","formatCountLong","Field","label","type","toString","onChange","onCrawlerSleepTimeChange","BaseDialog","onFinished","title","DialogButtons","primaryButton","onPrimaryButtonClick","primaryButtonClass","cancelButton","onCancel","onDisable","cancelButtonClass"],"sourceRoot":""}