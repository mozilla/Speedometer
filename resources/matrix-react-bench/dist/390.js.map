{"version":3,"file":"390.js","mappings":"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","sources":["webpack://matrix-shell-bench/./node_modules/matrix-react-sdk/src/effects/confetti/index.ts"],"sourcesContent":["/*\n Copyright 2020 Nurjin Jafar\n Copyright 2020 Nordeck IT + Consulting GmbH.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\nimport ICanvasEffect from '../ICanvasEffect';\n\nexport type ConfettiOptions = {\n    /**\n     * max confetti count\n     */\n    maxCount: number;\n    /**\n     * particle animation speed\n     */\n    speed: number;\n    /**\n     * the confetti animation frame interval in milliseconds\n     */\n    frameInterval: number;\n    /**\n     * the alpha opacity of the confetti (between 0 and 1, where 1 is opaque and 0 is invisible)\n     */\n    alpha: number;\n    /**\n     * use gradient instead of solid particle color\n     */\n    gradient: boolean;\n};\n\ntype ConfettiParticle = {\n    color: string;\n    color2: string;\n    x: number;\n    y: number;\n    diameter: number;\n    tilt: number;\n    tiltAngleIncrement: number;\n    tiltAngle: number;\n};\n\nexport const DefaultOptions: ConfettiOptions = {\n    maxCount: 150,\n    speed: 3,\n    frameInterval: 15,\n    alpha: 1.0,\n    gradient: false,\n};\n\nexport default class Confetti implements ICanvasEffect {\n    private readonly options: ConfettiOptions;\n\n    constructor(options: { [key: string]: any }) {\n        this.options = { ...DefaultOptions, ...options };\n    }\n\n    private context: CanvasRenderingContext2D | null = null;\n    private supportsAnimationFrame = window.requestAnimationFrame;\n    private colors = ['rgba(30,144,255,', 'rgba(107,142,35,', 'rgba(255,215,0,',\n        'rgba(255,192,203,', 'rgba(106,90,205,', 'rgba(173,216,230,',\n        'rgba(238,130,238,', 'rgba(152,251,152,', 'rgba(70,130,180,',\n        'rgba(244,164,96,', 'rgba(210,105,30,', 'rgba(220,20,60,'];\n\n    private lastFrameTime = Date.now();\n    private particles: Array<ConfettiParticle> = [];\n    private waveAngle = 0;\n\n    public isRunning: boolean;\n\n    public start = async (canvas: HTMLCanvasElement, timeout = 3000) => {\n        if (!canvas) {\n            return;\n        }\n        this.context = canvas.getContext('2d');\n        this.particles = [];\n        const count = this.options.maxCount;\n        while (this.particles.length < count) {\n            this.particles.push(this.resetParticle({} as ConfettiParticle, canvas.width, canvas.height));\n        }\n        this.isRunning = true;\n        this.runAnimation();\n        if (timeout) {\n            window.setTimeout(this.stop, timeout);\n        }\n    };\n\n    public stop = async () => {\n        this.isRunning = false;\n    };\n\n    private resetParticle = (particle: ConfettiParticle, width: number, height: number): ConfettiParticle => {\n        particle.color = this.colors[(Math.random() * this.colors.length) | 0] + (this.options.alpha + ')');\n        if (this.options.gradient) {\n            particle.color2 = this.colors[(Math.random() * this.colors.length) | 0] + (this.options.alpha + ')');\n        } else {\n            particle.color2 = particle.color;\n        }\n        particle.x = Math.random() * width;\n        particle.y = Math.random() * -height;\n        particle.diameter = Math.random() * 10 + 5;\n        particle.tilt = Math.random() * -10;\n        particle.tiltAngleIncrement = Math.random() * 0.07 + 0.05;\n        particle.tiltAngle = Math.random() * Math.PI;\n        return particle;\n    };\n\n    private runAnimation = (): void => {\n        if (!this.context || !this.context.canvas) {\n            return;\n        }\n        if (this.particles.length === 0) {\n            this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        } else {\n            const now = Date.now();\n            const delta = now - this.lastFrameTime;\n            if (!this.supportsAnimationFrame || delta > this.options.frameInterval) {\n                this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n                this.updateParticles();\n                this.drawParticles(this.context);\n                this.lastFrameTime = now - (delta % this.options.frameInterval);\n            }\n            requestAnimationFrame(this.runAnimation);\n        }\n    };\n\n    private drawParticles = (context: CanvasRenderingContext2D): void => {\n        if (!this.context || !this.context.canvas) {\n            return;\n        }\n        let x; let x2; let y2;\n        for (const particle of this.particles) {\n            this.context.beginPath();\n            context.lineWidth = particle.diameter;\n            x2 = particle.x + particle.tilt;\n            x = x2 + particle.diameter / 2;\n            y2 = particle.y + particle.tilt + particle.diameter / 2;\n            if (this.options.gradient) {\n                const gradient = context.createLinearGradient(x, particle.y, x2, y2);\n                gradient.addColorStop(0, particle.color);\n                gradient.addColorStop(1.0, particle.color2);\n                context.strokeStyle = gradient;\n            } else {\n                context.strokeStyle = particle.color;\n            }\n            context.moveTo(x, particle.y);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n    };\n\n    private updateParticles = () => {\n        if (!this.context || !this.context.canvas) {\n            return;\n        }\n        const width = this.context.canvas.width;\n        const height = this.context.canvas.height;\n        let particle: ConfettiParticle;\n        this.waveAngle += 0.01;\n        for (let i = 0; i < this.particles.length; i++) {\n            particle = this.particles[i];\n            if (!this.isRunning && particle.y < -15) {\n                particle.y = height + 100;\n            } else {\n                particle.tiltAngle += particle.tiltAngleIncrement;\n                particle.x += Math.sin(this.waveAngle) - 0.5;\n                particle.y += (Math.cos(this.waveAngle) + particle.diameter + this.options.speed) * 0.5;\n                particle.tilt = Math.sin(particle.tiltAngle) * 15;\n            }\n            if (particle.x > width + 20 || particle.x < -20 || particle.y > height) {\n                if (this.isRunning && this.particles.length <= this.options.maxCount) {\n                    this.resetParticle(particle, width, height);\n                } else {\n                    this.particles.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    };\n}\n"],"names":["DefaultOptions","maxCount","speed","frameInterval","alpha","gradient","Confetti","constructor","options","_this","_defineProperty","window","requestAnimationFrame","Date","now","async","canvas","timeout","arguments","length","undefined","context","getContext","particles","count","push","resetParticle","width","height","isRunning","runAnimation","setTimeout","stop","this","particle","color","colors","Math","random","color2","x","y","diameter","tilt","tiltAngleIncrement","tiltAngle","PI","clearRect","delta","lastFrameTime","supportsAnimationFrame","updateParticles","drawParticles","x2","y2","beginPath","lineWidth","createLinearGradient","addColorStop","strokeStyle","moveTo","lineTo","stroke","waveAngle","i","sin","cos","splice","_objectSpread"],"sourceRoot":""}