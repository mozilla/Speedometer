{"version":3,"file":"633.js","mappings":"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","sources":["webpack://matrix-shell-bench/./node_modules/matrix-react-sdk/src/effects/snowfall/index.ts"],"sourcesContent":["/*\n Copyright 2020 The Matrix.org Foundation C.I.C.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\nimport ICanvasEffect from '../ICanvasEffect';\nimport { arrayFastClone } from \"../../utils/arrays\";\n\nexport type SnowfallOptions = {\n    /**\n     * The maximum number of snowflakes to render at a given time\n     */\n    maxCount: number;\n    /**\n     * The amount of gravity to apply to the snowflakes\n     */\n    gravity: number;\n    /**\n     * The amount of drift (horizontal sway) to apply to the snowflakes. Each snowflake varies.\n     */\n    maxDrift: number;\n};\n\ntype Snowflake = {\n    x: number;\n    y: number;\n    xCol: number;\n    diameter: number;\n    maximumDrift: number;\n    gravity: number;\n};\n\nexport const DefaultOptions: SnowfallOptions = {\n    maxCount: 200,\n    gravity: 0.05,\n    maxDrift: 5,\n};\n\nconst KEY_FRAME_INTERVAL = 15; // 15ms, roughly\n\nexport default class Snowfall implements ICanvasEffect {\n    private readonly options: SnowfallOptions;\n\n    constructor(options: { [key: string]: any }) {\n        this.options = { ...DefaultOptions, ...options };\n    }\n\n    private context: CanvasRenderingContext2D | null = null;\n    private particles: Array<Snowflake> = [];\n    private lastAnimationTime: number;\n\n    public isRunning: boolean;\n\n    public start = async (canvas: HTMLCanvasElement, timeout = 3000) => {\n        if (!canvas) {\n            return;\n        }\n        this.context = canvas.getContext('2d');\n        this.particles = [];\n        const count = this.options.maxCount;\n        while (this.particles.length < count) {\n            this.particles.push(this.resetParticle({} as Snowflake, canvas.width, canvas.height));\n        }\n        this.isRunning = true;\n        requestAnimationFrame(this.renderLoop);\n        if (timeout) {\n            window.setTimeout(this.stop, timeout);\n        }\n    };\n\n    public stop = async () => {\n        this.isRunning = false;\n    };\n\n    private resetParticle = (particle: Snowflake, width: number, height: number): Snowflake => {\n        particle.x = Math.random() * width;\n        particle.y = Math.random() * -height;\n        particle.xCol = particle.x;\n        particle.diameter = (Math.random() * 7) + 4;\n        particle.maximumDrift = (Math.random() * this.options.maxDrift) + 3.5;\n        particle.gravity = this.options.gravity + (Math.random() * 6) + 4;\n        return particle;\n    };\n\n    private renderLoop = (): void => {\n        if (!this.context || !this.context.canvas) {\n            return;\n        }\n        if (this.particles.length === 0) {\n            this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        } else {\n            const timeDelta = Date.now() - this.lastAnimationTime;\n            if (timeDelta >= KEY_FRAME_INTERVAL || !this.lastAnimationTime) {\n                // Clear the screen first\n                this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n\n                this.lastAnimationTime = Date.now();\n                this.animateAndRenderSnowflakes();\n            }\n            requestAnimationFrame(this.renderLoop);\n        }\n    };\n\n    private animateAndRenderSnowflakes() {\n        if (!this.context || !this.context.canvas) {\n            return;\n        }\n        const height = this.context.canvas.height;\n        for (const particle of arrayFastClone(this.particles)) {\n            particle.y += particle.gravity;\n\n            // We treat the drift as a sine function to have a more fluid-like movement instead\n            // of a pong-like movement off walls of the X column. This means that for\n            // $x=A\\sin(\\frac{2\\pi}{P}y)$ we use the `maximumDrift` as the amplitude (A) and a\n            // large multiplier to create a very long waveform through P.\n            const peakDistance = 75 * particle.maximumDrift;\n            const PI2 = Math.PI * 2;\n            particle.x = particle.maximumDrift * Math.sin((PI2 / peakDistance) * particle.y);\n            particle.x += particle.xCol; // bring the particle to the right place\n\n            const radius = particle.diameter / 2;\n            this.context.save();\n            this.context.beginPath();\n            this.context.ellipse(particle.x, particle.y, radius, radius, 0, 0, 360);\n            this.context.fillStyle = '#eaeaea'; // grey so it shows up on the light theme\n            this.context.fill();\n            this.context.closePath();\n            this.context.restore();\n\n            // Remove any dead snowflakes\n            const maxBounds = radius * 4; // make sure it's *really* off screen\n            if (particle.y > (height + maxBounds)) {\n                const idx = this.particles.indexOf(particle);\n                this.particles.splice(idx, 1);\n            }\n        }\n    }\n}\n"],"names":["arrayFastClone","DefaultOptions","maxCount","gravity","maxDrift","KEY_FRAME_INTERVAL","Snowfall","constructor","options","_this","_defineProperty","canvas","timeout","arguments","length","undefined","context","getContext","particles","count","push","resetParticle","width","height","isRunning","requestAnimationFrame","renderLoop","window","setTimeout","stop","particle","x","Math","random","y","xCol","diameter","maximumDrift","clearRect","timeDelta","Date","now","lastAnimationTime","animateAndRenderSnowflakes","_objectSpread","peakDistance","PI2","PI","sin","radius","save","beginPath","ellipse","fillStyle","fill","closePath","restore","maxBounds","idx","indexOf","splice"],"sourceRoot":""}